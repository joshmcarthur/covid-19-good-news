{"version":3,"sources":["Chrome.jsx","ListingItem.jsx","Listing.jsx","App.js","serviceWorker.js","index.js"],"names":["children","align","listing","thumbnail","square","imageUrl","style","padding","title","href","permalink","outlined","url","listings","flex","maxWidth","height","length","map","key","id","desktopColumns","phoneColumns","tabletColumns","ListingItem","columns","indeterminate","process","kind","Error","data","child","results","filter","link_flair_text","lastRef","after","parse","req","json","listingsCount","App","useState","setLastRef","setListings","useEffect","load","useCallback","fetch","then","newLastRef","l","concat","setTimeout","Chrome","Listing","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","body","URL","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3b98548e.chunk.js","sourcesContent":["import React from \"react\";\nimport TopAppBar, {\n  TopAppBarFixedAdjust, \n  TopAppBarRow,\n  TopAppBarSection,\n  TopAppBarTitle,\n} from '@material/react-top-app-bar';\n\nexport default ({children}) => {\n  return (\n    <>\n      <TopAppBar>\n        <TopAppBarRow>\n          <TopAppBarSection align='start'>     \n            <TopAppBarTitle>Only Good News</TopAppBarTitle>\n          </TopAppBarSection>\n      \n        </TopAppBarRow>\n      </TopAppBar>\n      <TopAppBarFixedAdjust>\n        {children}\n      </TopAppBarFixedAdjust>\n      </>\n  );\n}","import React from \"react\";\nimport Card, {\n  CardPrimaryContent,\n  CardMedia,\n  CardActions,\n  CardActionButtons,\n  CardActionIcons,\n} from \"@material/react-card\";\n\nimport {\n  Body2,\n} from '@material/react-typography';\nimport Button from '@material/react-button';\n\n\nexport default ({ listing }) => (\n  <Card>\n    <CardPrimaryContent>\n      {listing.thumbnail && <CardMedia square imageUrl={listing.thumbnail} />}\n      <Body2 style={{padding: '0.67rem'}}>{listing.title}</Body2>\n    </CardPrimaryContent>\n\n    <CardActions>\n      <CardActionButtons>\n        <Button href={`https://reddit.com${listing.permalink}`}>Source</Button>\n      </CardActionButtons>\n\n      <CardActionIcons>\n        <Button outlined href={listing.url}>Read more</Button>\n\n      </CardActionIcons>\n    </CardActions>\n  </Card>\n);\n","import React from \"react\";\nimport { Cell, Grid, Row } from \"@material/react-layout-grid\";\nimport ListingItem from \"./ListingItem\";\nimport LinearProgress from \"@material/react-linear-progress\";\n\nexport default ({ listings }) => (\n  <Grid style={{ flex: 1, maxWidth: \"1080px\" }}>\n    <Row style={{ flex: 1, height: \"100%\" }}>\n      {listings && listings.length ? (\n        listings.map(listing => (\n          <Cell key={listing.id} desktopColumns={3} phoneColumns={12} tabletColumns={5}>\n            <ListingItem listing={listing} />\n          </Cell>\n        ))\n      ) : (\n        <>\n          <Cell columns={4} />\n          <Cell align=\"middle\" columns={4}>\n            <LinearProgress indeterminate={true} />\n          </Cell>\n          <Cell columns={4} />\n        </>\n      )}\n    </Row>\n  </Grid>\n);\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport Chrome from \"./Chrome\";\nimport Listing from \"./Listing\";\nimport \"./App.scss\";\n\nconst process = listing => {\n  if (listing.kind !== \"Listing\") {\n    throw new Error(\"Unexpected Reddit response: \" + listing.kind);\n  }\n\n  let children = listing.data.children.map(child => child.data);\n  if (!children || !children.length) {\n    throw new Error(\"Expected post to have children, but it had none.\");\n  }\n\n  return { results: children.filter(child => child.link_flair_text === \"Good News\"), lastRef: listing.data.after };\n};\n\nconst parse = req => req.json();\nconst DEBOUNCE = 3000;\nconst initialPageSize = 50;\n\nlet listingsCount = 0;\n\n\nfunction App() {\n  const [lastRef, setLastRef] = useState();\n  const [listings, setListings] = useState([]);\n  useEffect(() =>  { listingsCount = listings.length; }, [listings]);\n  const load = useCallback(\n      () =>\n        fetch(`https://www.reddit.com/r/coronavirus.json?after=${lastRef}`)\n          .then(parse)\n          .then(process)\n          .then(({ results, lastRef: newLastRef }) => {\n            setListings(l => l.concat(results));\n            listingsCount < initialPageSize ? setLastRef(newLastRef) : setTimeout(() => setLastRef(newLastRef), DEBOUNCE);\n          }),\n      [lastRef]\n    );\n\n  // useEffect(() => {\n  //   load();\n  // }, [load]);\n  useEffect(() => {\n    load();\n  }, [load]);\n\n  return (\n    <Chrome>\n      <Listing listings={listings} />\n    </Chrome>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.body);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}